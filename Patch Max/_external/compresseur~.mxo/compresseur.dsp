declare filename "compresseur.dsp"; declare name "compresseur"; declare compilation_options    "-single -scal -I libraries/ -I project/ -lang wasm";
declare library_path0 "/libraries/stdfaust.lib";
declare library_path1 "/libraries/demos.lib";
declare library_path2 "/libraries/basics.lib";
declare library_path3 "/libraries/compressors.lib";
declare library_path4 "/libraries/maths.lib";
declare library_path5 "/libraries/platform.lib";
declare library_path6 "/libraries/analyzers.lib";
declare library_path7 "/libraries/signals.lib";
declare library_path8 "/libraries/routes.lib";
declare analyzers_lib_name "Faust Analyzer Library";
declare analyzers_lib_version "0.1";
declare author "JOS, revised by RM";
declare basics_lib_bypass2_author "Julius Smith";
declare basics_lib_name "Faust Basic Element Library";
declare basics_lib_version "0.6";
declare compressors_lib_compression_gain_mono_author "Julius O. Smith III";
declare compressors_lib_compression_gain_mono_copyright "Copyright (C) 2014-2020 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare compressors_lib_compression_gain_mono_license "MIT-style STK-4.3 license";
declare compressors_lib_compressor_stereo_author "Julius O. Smith III";
declare compressors_lib_compressor_stereo_copyright "Copyright (C) 2014-2020 by Julius O. Smith III <jos@ccrma.stanford.edu>";
declare compressors_lib_compressor_stereo_license "MIT-style STK-4.3 license";
declare compressors_lib_name "Faust Compressor Effect Library";
declare compressors_lib_version "0.2";
declare demos_lib_name "Faust Demos Library";
declare demos_lib_version "0.1";
declare description "Compressor demo application";
declare filename "FaustDSP";
declare maths_lib_author "GRAME";
declare maths_lib_copyright "GRAME";
declare maths_lib_license "LGPL with exception";
declare maths_lib_name "Faust Math Library";
declare maths_lib_version "2.5";
declare name "compressor";
declare platform_lib_name "Generic Platform Library";
declare platform_lib_version "0.2";
declare routes_lib_name "Faust Signal Routing Library";
declare routes_lib_version "0.2";
declare signals_lib_name "Faust Signal Routing Library";
declare signals_lib_version "0.1";
declare version "0.0";
ID_54 = ID_50, 1.0f;
ID_55 = ID_53, ID_54;
ID_56 = (ID_55 : select2);
ID_57 = ID_56, ID_37;
ID_58 = (ID_57 : *);
ID_59 = -1.0f, ID_58;
ID_60 = ID_59 : /;
ID_61 = (ID_60 : exp);
ID_62 = ID_61, 0.0f;
ID_63 = ID_53, ID_62;
ID_64 = (ID_63 : select2);
ID_65 = ID_45, ID_64;
ID_66 = >, ID_65;
ID_67 = (ID_66 : select2);
ID_68 = ID_67, _;
ID_77 = hbargraph("[1] Compressor Gain [unit:dB] [tooltip: Current gain of     the compressor in dB]", -50.0f, 10.0f);
ID_78 = hgroup("[0]", ID_77);
ID_79 = vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", ID_78);
ID_69 = (ID_68 : \(x1).(\(x2).(\(x3).(((1.0f,x1 : -),x2 : *),(x1,x3 : *) : +)~_)));
ID_70 = ID_69 ~ _;
ID_71 = _ <: ID_70;
ID_72 = abs : ID_71;
ID_89 = hslider("[5] Makeup Gain [unit:dB]     [tooltip: The compressed-signal output level is increased by this amount     (in dB) to make up for the level lost due to compression]", 40.0f, -96.0f, 96.0f, 0.10000000000000001f);
ID_90 = vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", ID_89);
ID_2 = hgroup("[0]", ID_1);
ID_3 = vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", ID_2);
ID_4 = _, 0;
ID_5 = ID_3, ID_4;
ID_6 = (ID_5 : select2);
ID_7 = ID_6, ID_6;
ID_8 = ID_7 : ID_0;
ID_9 = ID_0 : ID_8;
ID_98 = 2, 1;
ID_99 = 2, ID_98;
ID_100 = 1, ID_99;
ID_101 = route(2,2,ID_100);
ID_102 = ID_101, _;
ID_103 = _, ID_102;
ID_104 = ID_3, ID_0;
ID_105 = (ID_104 : select2);
ID_106 = ID_105, ID_105;
ID_107 = ID_106 : ID_0;
ID_108 = ID_103 : ID_107;
ID_73 = \(x35).(\(x36).(((1.0f,((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : / : abs),1.1920928960000001e-07f : <),(-1.0f,(((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : / : abs),1.1920928960000001e-07f : <),((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : /),1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : -),x35 : *),(((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : / : abs),1.1920928960000001e-07f : <),(-1.0f,(((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : / : abs),1.1920928960000001e-07f : <),((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : /),1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),x36 : *) : +)~_) : \(x37).(10.0f,(x37,20.0f : /) : pow);
ID_74 = \(x34).(((x34,vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[3] Compression Control", hslider("[1] Threshold [unit:dB] [style:knob]     [tooltip: When the signal level exceeds the Threshold (in dB), its level     is compressed according to the Ratio]", -30.0f, -100.0f, 10.0f, 0.10000000000000001f)))) : -),0.0f : max),((1.0f,(1.1920928960000001e-07f,(vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[3] Compression Control", hslider("[0] Ratio [style:knob]     [tooltip: A compression Ratio of N means that for each N dB increase in input     signal level above Threshold, the output level goes up 1 dB]", 5.0f, 1.0f, 20.0f, 0.10000000000000001f)))) : float) : max) : /),1.0f : -) : *) : ID_73;
ID_75 = \(x33).(20.0f,(1.175494351e-38f,x33 : max : log10) : *) : ID_74;
ID_76 = ID_72 : ID_75;
ID_80 = \(x38).(20.0f,(1.175494351e-38f,x38 : max : log10) : *) : ID_79;
ID_81 = (ID_76 : ID_80);
ID_82 = _, ID_81;
ID_83 = _, ID_82;
ID_85 = ID_83 : ID_84;
ID_86 = ID_13 : ID_85;
ID_87 = ID_0 <: ID_86;
ID_88 = \(x28).(\(x29).((((x28 : abs),(x29 : abs) : + : abs : _<:((>,(((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max : abs),1.1920928960000001e-07f : <),(-1.0f,((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max : abs),1.1920928960000001e-07f : <),(vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),(((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[2] Release [unit:ms] [style: knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new higher target level (the compression     'releasing')]", 500.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max : abs),1.1920928960000001e-07f : <),(-1.0f,((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[2] Release [unit:ms] [style: knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new higher target level (the compression     'releasing')]", 500.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max : abs),1.1920928960000001e-07f : <),(vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[2] Release [unit:ms] [style: knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new higher target level (the compression     'releasing')]", 500.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : select2),_ : \(x1).(\(x2).(\(x3).(((1.0f,x1 : -),x2 : *),(x1,x3 : *) : +)~_)))~_ : \(x4).(20.0f,(1.175494351e-38f,x4 : max : log10) : *) : \(x30).(((x30,vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[3] Compression Control", hslider("[1] Threshold [unit:dB] [style:knob]     [tooltip: When the signal level exceeds the Threshold (in dB), its level     is compressed according to the Ratio]", -30.0f, -100.0f, 10.0f, 0.10000000000000001f)))) : -),0.0f : max),((1.0f,(1.1920928960000001e-07f,(vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[3] Compression Control", hslider("[0] Ratio [style:knob]     [tooltip: A compression Ratio of N means that for each N dB increase in input     signal level above Threshold, the output level goes up 1 dB]", 5.0f, 1.0f, 20.0f, 0.10000000000000001f)))) : float) : max) : /),1.0f : -) : *) : \(x31).(\(x32).(((1.0f,((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : / : abs),1.1920928960000001e-07f : <),(-1.0f,(((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : / : abs),1.1920928960000001e-07f : <),((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : /),1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : -),x31 : *),(((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : / : abs),1.1920928960000001e-07f : <),(-1.0f,(((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : / : abs),1.1920928960000001e-07f : <),((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : /),1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),x32 : *) : +)~_) : \(x8).(10.0f,(x8,20.0f : /) : pow)),x28 : *),(((x28 : abs),(x29 : abs) : + : abs : _<:((>,(((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max : abs),1.1920928960000001e-07f : <),(-1.0f,((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max : abs),1.1920928960000001e-07f : <),(vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),(((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[2] Release [unit:ms] [style: knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new higher target level (the compression     'releasing')]", 500.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max : abs),1.1920928960000001e-07f : <),(-1.0f,((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[2] Release [unit:ms] [style: knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new higher target level (the compression     'releasing')]", 500.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max : abs),1.1920928960000001e-07f : <),(vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[2] Release [unit:ms] [style: knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new higher target level (the compression     'releasing')]", 500.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : select2),_ : \(x1).(\(x2).(\(x3).(((1.0f,x1 : -),x2 : *),(x1,x3 : *) : +)~_)))~_ : \(x4).(20.0f,(1.175494351e-38f,x4 : max : log10) : *) : \(x30).(((x30,vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[3] Compression Control", hslider("[1] Threshold [unit:dB] [style:knob]     [tooltip: When the signal level exceeds the Threshold (in dB), its level     is compressed according to the Ratio]", -30.0f, -100.0f, 10.0f, 0.10000000000000001f)))) : -),0.0f : max),((1.0f,(1.1920928960000001e-07f,(vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[3] Compression Control", hslider("[0] Ratio [style:knob]     [tooltip: A compression Ratio of N means that for each N dB increase in input     signal level above Threshold, the output level goes up 1 dB]", 5.0f, 1.0f, 20.0f, 0.10000000000000001f)))) : float) : max) : /),1.0f : -) : *) : \(x31).(\(x32).(((1.0f,((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : / : abs),1.1920928960000001e-07f : <),(-1.0f,(((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : / : abs),1.1920928960000001e-07f : <),((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : /),1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2) : -),x31 : *),(((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : / : abs),1.1920928960000001e-07f : <),(-1.0f,(((((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : / : abs),1.1920928960000001e-07f : <),((vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", hgroup("[1]", hgroup("[4] Compression Response", hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f)))) : _,0.001f : * : (1,(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min) : /),_ : max),2.0f : /),1.0f : select2),(192000.0f,(1.0f,fconstant(int fSamplingFreq, <math.h>) : max) : min : float) : *) : / : exp),0.0f : select2),x32 : *) : +)~_) : \(x8).(10.0f,(x8,20.0f : /) : pow)),x29 : *))) : ID_87;
ID_91 = (ID_90 : \(x39).(10.0f,(x39,20.0f : /) : pow));
ID_92 = _, ID_91;
ID_93 = (ID_92 : *);
ID_94 = ID_93, ID_93;
ID_95 = ID_88 : ID_94;
ID_96 = (ID_9 : ID_95);
ID_97 = ID_96, ID_0;
ID_109 = ID_97 : ID_108;
ID_110 = ID_0 <: ID_109;
ID_1 = checkbox("[0] Bypass    [tooltip: When this is checked, the compressor         has no effect]");
ID_0 = _, _;
ID_10 = abs, abs;
ID_11 = (ID_10 : +);
ID_12 = _, ID_11;
ID_13 = _, ID_12;
ID_84 = _, attach;
ID_42 = (ID_41 : exp);
ID_39 = (ID_38 : *);
ID_40 = -1.0f, ID_39;
ID_38 = ID_36, ID_37;
ID_41 = ID_40 : /;
ID_37 = (ID_24 : float);
ID_43 = ID_42, 0.0f;
ID_44 = ID_33, ID_43;
ID_45 = (ID_44 : select2);
ID_46 = hslider("[2] Release [unit:ms] [style: knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new higher target level (the compression     'releasing')]", 500.0f, 1.0f, 1000.0f, 0.10000000000000001f);
ID_47 = hgroup("[4] Compression Response", ID_46);
ID_48 = hgroup("[1]", ID_47);
ID_49 = vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", ID_48);
ID_18 = _, 0.001f;
ID_19 = ID_18 : *;
ID_20 = fconstant(int fSamplingFreq, <math.h>);
ID_21 = 1.0f, ID_20;
ID_22 = (ID_21 : max);
ID_23 = 192000.0f, ID_22;
ID_24 = (ID_23 : min);
ID_25 = 1, ID_24;
ID_26 = (ID_25 : /);
ID_27 = ID_26, _;
ID_28 = ID_27 : max;
ID_29 = ID_19 : ID_28;
ID_50 = ID_49 : ID_29;
ID_14 = hslider("[1] Attack [unit:ms] [style:knob] [scale:log]     [tooltip: Time constant in ms (1/e smoothing time) for the compression gain     to approach (exponentially) a new lower target level (the compression     `kicking in')]", 50.0f, 1.0f, 1000.0f, 0.10000000000000001f);
ID_15 = hgroup("[4] Compression Response", ID_14);
ID_16 = hgroup("[1]", ID_15);
ID_17 = vgroup("COMPRESSOR [tooltip: Reference:         http://en.wikipedia.org/wiki/Dynamic_range_compression]", ID_16);
ID_30 = ID_17 : ID_29;
ID_31 = (ID_30 : abs);
ID_32 = ID_31, 1.1920928960000001e-07f;
ID_33 = (ID_32 : <);
ID_34 = ID_30, 1.0f;
ID_35 = ID_33, ID_34;
ID_36 = (ID_35 : select2);
ID_51 = (ID_50 : abs);
ID_52 = ID_51, 1.1920928960000001e-07f;
ID_53 = (ID_52 : <);
process = ID_110;
